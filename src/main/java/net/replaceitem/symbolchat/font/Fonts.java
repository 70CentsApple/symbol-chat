package net.replaceitem.symbolchat.font;

import net.minecraft.client.resource.language.I18n;

import java.util.ArrayList;
import java.util.List;

public class Fonts {

    public static List<FontProcessor> fontProcessors;



    public static FontProcessor NORMAL = new FontProcessor("normal", s -> s);

    public static FontProcessor SUPERSCRIPT = new MappedFontProcessor("superscript",
            new FontMapBuilder()
                    .putAlphabetUpper("·¥¨·¥Æ·∂ú·¥∞·¥±Íü≥·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æÍü¥·¥øÀ¢·µÄ·µÅ‚±Ω·µÇÀ£ ∏·∂ª")
                    .putAlphabetLower("·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞ûÅå ≤·µèÀ°·µêûÄΩ·µí·µñêû• ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª")
                    .putNumbers("‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ")
                    .put('+','‚Å∫')
                    .put('-','‚Åª')
                    .put('=','‚Åº')
                    .put('(','‚ÅΩ')
                    .put(')','‚Åæ')
                    .build()
    );

    public static FontProcessor SUBSCRIPT = new MappedFontProcessor("subscript",
            new FontMapBuilder()
                    .putAlphabetUpper("‚ÇêûÅìûÅûD‚Çë’¢G‚Çï·µ¢‚±ºûÅö‚Çó‚ÇòûÅùûÅú‚ÇöQ·µ£‚Çõ‚ÇúûÅ¢·µ•ûÅ§ûÅ°ûÅüZ")
                    .putAlphabetLower("‚ÇêûÅ•ûÅû‚Çî‚Çë’¢‚Çâ‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çöq·µ£‚Çõ‚Çú·µ§·µ•ûÅ§‚Çì·µß‚ÇÇ")
                    .putNumbers("‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ")
                    .put('+','‚Çä')
                    .put('-','‚Çã')
                    .put('=','‚Çå')
                    .put('(','‚Çç')
                    .put(')','‚Çé')
                    .build()
    );


    public static FontProcessor CIRCLED = new MappedFontProcessor("circled",
            new FontMapBuilder()
                    .shiftSequence('1', 0x2460, 9)
                    .put('0', 0x24EA)
                    .shiftAlphabetUpper(0x24B6)
                    .shiftAlphabetLower(0x24D0)
                    .put('+','‚äï')
                    .put('-','‚äù')
                    .put('=','‚äú')
                    .put('*','‚äõ')
                    .put('/','‚äò')
                    .build()
    );

    public static FontProcessor NEGATIVE_CIRCLED = new MappedFontProcessor("negative_circled",
            new FontMapBuilder()
                    .shiftAlphabetUpper(0x1F150)
                    .shiftAlphabetLower(0x1F150)
                    .shiftSequence('1', 0x278A, 9)
                    .put('0', "‚ìø")
                    .build()
    );

    public static FontProcessor SQUARED = new MappedFontProcessor("squared",
            new FontMapBuilder()
                    .shiftAlphabetUpper(0x1F130)
                    .shiftAlphabetLower(0x1F130)
                    .build()
    );

    public static FontProcessor NEGATIVE_SQUARED = new MappedFontProcessor("negative_squared",
            new FontMapBuilder()
                    .shiftAlphabetUpper(0x1F170)
                    .shiftAlphabetLower(0x1F170)
                    .build()
    );

    public static FontProcessor REGIONAL_INDICATOR = new MappedFontProcessor("regional_indicator",
            new FontMapBuilder()
                    .shiftAlphabetUpper(0x1F1E6)
                    .shiftAlphabetLower(0x1F1E6)
                    .build()
    );
    
    public static FontProcessor INVERSE = new MappedFontProcessor("inverse",
            new FontMapBuilder()
                    .putNumbers("0∆ñ’á∆êﬂàœõ9„Ñ•86")
                    .putAlphabetUpper("‚±Ø·ó∫∆Ü·ó°∆é‚Ñ≤‚ÖÅHI≈øÍû∞ÍûÄWNO‘Ä·ø∏·¥öS‚üò‚à©…ÖMX‚ÖÑZ")
                    .putAlphabetLower("…êq…îp«ù…ü…ì…•·¥â≈ø ûÍûÅ…Øuodb…πs án å çx éz")
                    .put('!','¬°')
                    .put(',','\'')
                    .put('.','Àô')
                    .put('?','¬ø')
                    .putSeperated(
                            "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è",
                            "‚±Ø","9","·ó∫","…∫","‚ñΩ","∆é","”¨",")|(","∆ê","–ò","≈Ö","Íû∞","‚îÉ É","W","H","O","U","‘Ä","∆Ü","‚üò","…¶","–§","‚ï≥","'|ÍûÄ","“∫","|ÍûÄÍûÄ","'|ÍûÄÍûÄ","·∂ê","ƒ±q","q","–Ñ","–û‚î´"," Å","…ê","g"," ö","…π","…ì","«ù","”≠","–∂","Œµ","–∏","≈Ü"," û","v","…Ø","–Ω","–æ","u","d","…î","w"," é","»∏","—Ö","‚ïπn","“ª"," ç","‚ïπ ç","Íüº.","ƒ±Íüº","Íüº","—î","Íôî"," Å"
                    )
                    .build()
    ) {
        @Override
        public String getConvertedName() {
            return this.convertString(new StringBuilder(I18n.translate(this.nameKey)).reverse().toString());
        }
    };

    public static FontProcessor FULLWIDTH = new MappedFontProcessor("fullwidth",
            new FontMapBuilder()
                    .shiftSequence('!', 0xFF01, '~'-'!'+1)
                    .build()
    );

    public static FontProcessor SMALL = new MappedFontProcessor("small",
            new FontMapBuilder()
                    .putAlphabetUpper("·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢")
                    .putAlphabetLower("·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢")
                    .build()
    );


    public static FontProcessor BRACKETS = new MappedFontProcessor("brackets",
            new FontMapBuilder()
                    .shiftSequence('1', 0x2474, 9)
                    .shiftAlphabetUpper(0x1F110)
                    .shiftAlphabetLower(0x249C)
                    .build()
    );

    public static FontProcessor MATHEMATICAL = new MappedFontProcessor("mathematical",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDDA0")
                    .shiftAlphabetLower("\uD835\uDDBA")
                    .shiftNumbers("\uD835\uDFE2")
                    .build()
    );

    public static FontProcessor MATHEMATICAL_BOLD = new MappedFontProcessor("mathematical_bold",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDDD4")
                    .shiftAlphabetLower("\uD835\uDDEE")
                    .shiftNumbers("\uD835\uDFEC")
                    .build()
    );

    public static FontProcessor MATHEMATICAL_ITALIC = new MappedFontProcessor("mathematical_italic",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDE08")
                    .shiftAlphabetLower("\uD835\uDE22")
                    .shiftNumbers("\uD835\uDFE2")
                    .build()
    );

    public static FontProcessor MATHEMATICAL_BOLD_ITALIC = new MappedFontProcessor("mathematical_bold_italic",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDE3C")
                    .shiftAlphabetLower("\uD835\uDE56")
                    .shiftNumbers("\uD835\uDFE2")
                    .build()
    );

    public static FontProcessor MATHEMATICAL_BOLD_SCRIPT = new MappedFontProcessor("mathematical_bold_script",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDCD0")
                    .shiftAlphabetLower("\uD835\uDCEA")
                    .shiftNumbers("\uD835\uDFE2")
                    .build()
    );

    public static FontProcessor MATHEMATICAL_DOUBLE_STRUCK = new MappedFontProcessor("mathematical_double_struck",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDD52") // identical to lower, since upper has some missing unifont chars
                    .shiftAlphabetLower("\uD835\uDD52")
                    .shiftNumbers("\uD835\uDFD8")
                    .build()
    );

    public static FontProcessor MATHEMATICAL_BOLD_FRAKTUR = new MappedFontProcessor("mathematical_bold_fraktur",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDD6C")
                    .shiftAlphabetLower("\uD835\uDD86")
                    .shiftNumbers("\uD835\uDFE2")
                    .build()
    );

    public static FontProcessor MATHEMATICAL_MONOSPACE = new MappedFontProcessor("mathematical_monospace",
            new FontMapBuilder()
                    .shiftAlphabetUpper("\uD835\uDE70")
                    .shiftAlphabetLower("\uD835\uDE8A")
                    .shiftNumbers("\uD835\uDFF6")
                    .build()
    );


    public static FontProcessor SCRIBBLE = new MappedFontProcessor("scribble",
            new FontMapBuilder()
                    .putAlphabetUpper("·ó©·ó∑·ë¢·ó´·òø·ñ¥·è©·ïº·ì∞‚Ñê·è¶·í™‚Ñ≥‚Ñï‚Ñ¥·ïµ‚Ñö·ñá·èïœÑ·ëò·ê∫·ò∫·ô≠·ñª‚Ñ§")
                    .putAlphabetLower("Œ±œ¨·è®»°‚ÑØ∆í‚Ñä‚Ñé·é•‚Ñë“°‚Ñì·ó∞‚Ñµ‚Ñ¥·ïµ·ï¥‚Ñú·èï·ñ∂‚à™·èâ—°·ô≠‡Ø∂·èÉ")
                    .build()
    );

    public static FontProcessor BIG_SCRIBBLE = new MappedFontProcessor("big_scribble",
            new FontMapBuilder()
                    .putAlphabetUpper("ÂçÇ‰πÉÂåö·ó™‰πáÂçÉ·é∂ÂçÑ‰∏®Ôæå“ú„Ñ•Áà™Âá†„ÑñÂç©…äÂ∞∫‰∏Ç„Ñí„Ñ©·êØÂ±±‰πÇ„Ñö‰πô")
                    .putAlphabetLower("ÂçÇ‰πÉÂåö·ó™‰πáÂçÉ·é∂ÂçÑ‰∏®Ôæå“ú„Ñ•Áà™Âá†„ÑñÂç©…äÂ∞∫‰∏Ç„Ñí„Ñ©·êØÂ±±‰πÇ„Ñö‰πô")
                    .build()
    );


    public static void registerFonts() {
        fontProcessors = new ArrayList<>();
        fontProcessors.add(NORMAL);
        fontProcessors.add(SUPERSCRIPT);
        fontProcessors.add(SUBSCRIPT);
        fontProcessors.add(CIRCLED);
        fontProcessors.add(NEGATIVE_CIRCLED);
        fontProcessors.add(SQUARED);
        fontProcessors.add(NEGATIVE_SQUARED);
        fontProcessors.add(REGIONAL_INDICATOR);
        fontProcessors.add(INVERSE);
        fontProcessors.add(FULLWIDTH);
        fontProcessors.add(SMALL);
        fontProcessors.add(BRACKETS);
        fontProcessors.add(MATHEMATICAL);
        fontProcessors.add(MATHEMATICAL_BOLD);
        fontProcessors.add(MATHEMATICAL_ITALIC);
        fontProcessors.add(MATHEMATICAL_BOLD_ITALIC);
        fontProcessors.add(MATHEMATICAL_BOLD_SCRIPT);
        fontProcessors.add(MATHEMATICAL_DOUBLE_STRUCK);
        fontProcessors.add(MATHEMATICAL_BOLD_FRAKTUR);
        fontProcessors.add(MATHEMATICAL_MONOSPACE);
        fontProcessors.add(SCRIBBLE);
        fontProcessors.add(BIG_SCRIBBLE);
    }

}
